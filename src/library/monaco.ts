export const libJestSource = [
  'declare var beforeAll: jest.Lifecycle;',
  'declare var beforeEach: jest.Lifecycle;',
  'declare var afterAll: jest.Lifecycle;',
  'declare var afterEach: jest.Lifecycle;',
  'declare var describe: jest.Describe;',
  'declare var fdescribe: jest.Describe;',
  'declare var xdescribe: jest.Describe;',
  'declare var it: jest.It;',
  'declare var fit: jest.It;',
  'declare var xit: jest.It;',
  'declare var test: jest.It;',
  'declare var xtest: jest.It;',
  '',
  'declare function expect(actual: any): jest.Matchers;',
  '',
  'interface NodeRequire {',
  '    ',
  '    requireActual(moduleName: string): any;',
  '    ',
  '    requireMock(moduleName: string): any;',
  '}',
  '',
  'declare namespace jest {',
  '    function addMatchers(matchers: jasmine.CustomMatcherFactories): typeof jest;',
  '    ',
  '    function autoMockOff(): typeof jest;',
  '    ',
  '    function autoMockOn(): typeof jest;',
  '    ',
  '    function clearAllMocks(): typeof jest;',
  '    ',
  '    function clearAllTimers(): typeof jest;',
  '    ',
  '    function deepUnmock(moduleName: string): typeof jest;',
  '    ',
  '    function disableAutomock(): typeof jest;',
  '    ',
  '    function doMock(moduleName: string, factory?: () => any, options?: MockOptions): typeof jest;',
  '    ',
  '    function dontMock(moduleName: string): typeof jest;',
  '    ',
  '    function enableAutomock(): typeof jest;',
  '    ',
  '    function fn<T>(implementation?: Function): Mock<T>;',
  '    ',
  '    function genMockFromModule<T>(moduleName: string): T;',
  '    ',
  '    function isMockFunction(fn: any): fn is Mock<any>;',
  '    ',
  '    function mock(moduleName: string, factory?: () => any, options?: MockOptions): typeof jest;',
  '    ',
  '    function resetModuleRegistry(): typeof jest;',
  '    ',
  '    function resetModules(): typeof jest;',
  '    ',
  '    function runAllImmediates(): typeof jest;',
  '    ',
  '    function runAllTicks(): typeof jest;',
  '    ',
  '    function runAllTimers(): typeof jest;',
  '    ',
  '    function runOnlyPendingTimers(): typeof jest;',
  '    ',
  '    function runTimersToTime(msToRun: number): typeof jest;',
  '    ',
  '    function setMock<T>(moduleName: string, moduleExports: T): typeof jest;',
  '    ',
  '    function unmock(moduleName: string): typeof jest;',
  '    ',
  '    function useFakeTimers(): typeof jest;',
  '    ',
  '    function useRealTimers(): typeof jest;',
  '',
  '    interface MockOptions {',
  '        virtual?: boolean | undefined;',
  '    }',
  '',
  '    interface EmptyFunction {',
  '        (): void;',
  '    }',
  '',
  '    interface DoneCallback {',
  '        (...args: any[]): any',
  '        fail(error?: string | { message: string }): any;',
  '    }',
  '',
  '    interface ProvidesCallback {',
  '        (cb: DoneCallback): any;',
  '    }',
  '',
  '    interface Lifecycle {',
  '        (fn: ProvidesCallback): any;',
  '    }',
  '',
  '    interface It {',
  '        (name: string, fn?: ProvidesCallback): void;',
  '        only: It;',
  '        skip: It;',
  '        concurrent: It;',
  '    }',
  'interface Describe {',
  '        (name: string, fn: EmptyFunction): void',
  '        only: Describe;',
  '        skip: Describe;',
  '    }',
  '',
  '    interface Matchers {',
  '        not: Matchers;',
  '        lastCalledWith(...args: any[]): void;',
  '        toBe(expected: any): void;',
  '        toBeCalled(): void;',
  '        toBeCalledWith(...args: any[]): void;',
  '        toBeCloseTo(expected: number, delta: number): void;',
  '        toBeDefined(): void;',
  '        toBeFalsy(): void;',
  '        toBeGreaterThan(expected: number): void;',
  '        toBeGreaterThanOrEqual(expected: number): void;',
  '        toBeInstanceOf(expected: any): void',
  '        toBeLessThan(expected: number): void;',
  '        toBeLessThanOrEqual(expected: number): void;',
  '        toBeNull(): void;',
  '        toBeTruthy(): void;',
  '        toBeUndefined(): void;',
  '        toContain(expected: any): void;',
  '        toContainEqual(expected: any): void;',
  '        toEqual(expected: any): void;',
  '        toHaveBeenCalled(): boolean;',
  '        toHaveBeenCalledTimes(expected: number): boolean;',
  '        toHaveBeenCalledWith(...params: any[]): boolean;',
  '        toHaveBeenLastCalledWith(...params: any[]): boolean;',
  '        toMatch(expected: string | RegExp): void;',
  '        toMatchObject(expected: {}): void;',
  '        toMatchSnapshot(): void;',
  '        toThrow(): void;',
  '        toThrowError(error?: string | Constructable | RegExp): void;',
  '        toThrowErrorMatchingSnapshot(): void;',
  '    }',
  '',
  '    interface Constructable {',
  '        new (...args: any[]): any',
  '    }',
  '',
  '    interface Mock<T> extends Function {',
  '        new (): T;',
  '        (...args: any[]): any;',
  '        mock: MockContext<T>;',
  '        mockClear(): void;',
  '        mockReset(): void;',
  '        mockImplementation(fn: Function): Mock<T>;',
  '        mockImplementationOnce(fn: Function): Mock<T>;',
  '        mockReturnThis(): Mock<T>;',
  '        mockReturnValue(value: any): Mock<T>;',
  '        mockReturnValueOnce(value: any): Mock<T>;',
  '    }',
  '',
  '    interface MockContext<T> {',
  '        calls: any[][];',
  '        instances: T[];',
  '    }',
  '}',
  '',
  '//Jest ships with a copy of Jasmine. They monkey-patch its APIs and divergence/deprecation are expected.',
  "//Relevant parts of Jasmine's API are below so they can be changed and removed over time.",
  "//This file can't reference jasmine.d.ts since the globals aren't compatible.",
  '',
  'declare function spyOn(object: any, method: string): jasmine.Spy;',
  '',
  'declare function pending(reason?: string): void;',
  '',
  'declare function fail(error?: any): void;',
  'declare namespace jasmine {',
  '    var clock: () => Clock;',
  '    function any(aclass: any): Any;',
  '    function anything(): Any;',
  '    function arrayContaining(sample: any[]): ArrayContaining;',
  '    function objectContaining(sample: any): ObjectContaining;',
  '    function createSpy(name: string, originalFn?: Function): Spy;',
  '    function createSpyObj(baseName: string, methodNames: any[]): any;',
  '    function createSpyObj<T>(baseName: string, methodNames: any[]): T;',
  '    function pp(value: any): string;',
  '    function addCustomEqualityTester(equalityTester: CustomEqualityTester): void;',
  '    function addMatchers(matchers: CustomMatcherFactories): void;',
  '    function stringMatching(value: string | RegExp): Any;',
  '',
  '    interface Clock {',
  '        install(): void;',
  '        uninstall(): void;',
  '        ',
  '        tick(ms: number): void;',
  '        mockDate(date?: Date): void;',
  '    }',
  '',
  '    interface Any {',
  '        new (expectedClass: any): any;',
  '        jasmineMatches(other: any): boolean;',
  '        jasmineToString(): string;',
  '    }',
  '',
  'interface ArrayContaining {',
  '        new (sample: any[]): any;',
  '        asymmetricMatch(other: any): boolean;',
  '        jasmineToString(): string;',
  '    }',
  '',
  '    interface ObjectContaining {',
  '        new (sample: any): any;',
  '        jasmineMatches(other: any, mismatchKeys: any[], mismatchValues: any[]): boolean;',
  '        jasmineToString(): string;',
  '    }',
  '',
  '    interface Spy {',
  '        (...params: any[]): any;',
  '        identity: string;',
  '        and: SpyAnd;',
  '        calls: Calls;',
  '        mostRecentCall: { args: any[]; };',
  '        argsForCall: any[];',
  '        wasCalled: boolean;',
  '    }',
  '',
  '    interface SpyAnd {',
  '        ',
  '        callThrough(): Spy;',
  '        ',
  '        returnValue(val: any): Spy;',
  '        ',
  '        returnValues(...values: any[]): Spy;',
  '        ',
  '        callFake(fn: Function): Spy;',
  '        ',
  '        throwError(msg: string): Spy;',
  '        ',
  '        stub(): Spy;',
  '    }',
  '',
  '    interface Calls {',
  '        ',
  '        any(): boolean;',
  '        ',
  '        count(): number;',
  '        ',
  '        argsFor(index: number): any[];',
  '        ',
  '        allArgs(): any[];',
  '        ',
  '        all(): CallInfo[];',
  '        ',
  '        mostRecent(): CallInfo;',
  '        ',
  '        first(): CallInfo;',
  '        ',
  '        reset(): void;',
  '    }',
  '',
  '    interface CallInfo {',
  '        ',
  '        object: any;',
  '        ',
  '        args: any[];',
  '        ',
  '        returnValue: any;',
  '    }',
  '',
  '    interface CustomMatcherFactories {',
  '        [index: string]: CustomMatcherFactory;',
  '    }',
  '',
  '    interface CustomMatcherFactory {',
  '        (util: MatchersUtil, customEqualityTesters: Array<CustomEqualityTester>): CustomMatcher;',
  '    }',
  '',
  '    interface MatchersUtil {',
  '        equals(a: any, b: any, customTesters?: Array<CustomEqualityTester>): boolean;',
  '        contains<T>(haystack: ArrayLike<T> | string, needle: any, customTesters?: Array<CustomEqualityTester>): boolean;',
  '        buildFailureMessage(matcherName: string, isNot: boolean, actual: any, ...expected: Array<any>): string;',
  '    }',
  '',
  '    interface CustomEqualityTester {',
  '        (first: any, second: any): boolean;',
  '    }',
  '',
  '    interface CustomMatcher {',
  '        compare<T>(actual: T, expected: T, ...args: any[]): CustomMatcherResult;',
  '        compare(actual: any, ...expected: any[]): CustomMatcherResult;',
  '    }',
  '',
  '    interface CustomMatcherResult {',
  '        pass: boolean;',
  '        message: string | (() => string);',
  '    }',
  '',
  '    interface ArrayLike<T> {',
  '        length: number;',
  '        [n: number]: T;',
  '    }',
  '}',
].join('\n');
